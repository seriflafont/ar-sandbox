{"version":3,"sources":["src/index.js"],"names":["THREE","window","GlobeAR","world","document","getElementById","fetch","then","res","json","countries","setupGlobe","features","polygonCountries","globeImageUrl","showGlobe","showAtmosphere","hexPolygonsData","hexPolygonResolution","hexPolygonMargin","hexPolygonAltitude","hexPolygonColor","Math","round","random","pow","toString","padStart"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,MAAM,CAACD,KAArB;AACA,IAAME,OAAO,GAAGD,MAAM,CAACC,OAAvB,EAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,KAAK,GAAGF,MAAM,CAACC,OAAP,EAAd;AACAC,KAAK,CAACC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAD,CAAL,EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,KAAK,CAAC,+CAAD,CAAL,CACGC,IADH,CACQ,UAACC,GAAD;EAAA,OAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,CADR,EAEGF,IAFH,CAEQ,UAACG,SAAD,EAAe;EACnBC,UAAU,CAACD,SAAS,CAACE,QAAX,CAAV;AACD,CAJH;;AAMA,IAAMD,UAAU,GAAG,SAAbA,UAAa,CAACE,gBAAD,EAAsB;EACvC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAV,KAAK,CACFW,aADH,CACiB,oDADjB,EAEGC,SAFH,CAEa,IAFb,EAGGC,cAHH,CAGkB,IAHlB,EAIGC,eAJH,CAImBJ,gBAJnB,EAKGK,oBALH,CAKwB,CALxB,EAMGC,gBANH,CAMoB,GANpB,EAOGC,kBAPH,CAOsB,IAPtB,EAQGC,eARH,CASI;IAAA,kBACMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAY,EAAZ,CAA3B,EACDC,QADC,CACQ,EADR,EAEDC,QAFC,CAEQ,CAFR,EAEW,GAFX,CADN;EAAA,CATJ;AAcD,CA3BD","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["const THREE = window.THREE;\nconst GlobeAR = window.GlobeAR;\n\n// import { CITIES } from \"./cities\";\n// const PURPLE = \"9966cc\";\n// const NUM_RINGS = 1;\n// const RINGS_MAX_R = 4; // deg\n// const RING_PROPAGATION_SPEED = 5; // deg/sec\n// const ARC_REL_LEN = 0.9;\n// const FLIGHT_TIME = 1000;\n\nconst world = window.GlobeAR();\nworld(document.getElementById(\"globeViz\"));\n\n// function getCities(count, data = {}) {\n//   return CITIES.map(([lat, lng]) => {\n//     return {\n//       lat,\n//       lng,\n//       ...data,\n//     };\n//   });\n// }\n// const FORMATTED_CITIES = getCities(20);\n\nfetch(\"../datasets/ne_110m_admin_0_countries.geojson\")\n  .then((res) => res.json())\n  .then((countries) => {\n    setupGlobe(countries.features);\n  });\n\nconst setupGlobe = (polygonCountries) => {\n  // const world = GlobeAR()\n  //   .globeImageUrl(\"//unpkg.com/three-globe/example/img/earth-dark.jpg\")\n  //   .hexPolygonsData(polygonCountries)\n  //   .hexPolygonResolution(3)\n  //   .hexPolygonMargin(0.3)\n  //   .hexPolygonAltitude(0.03)\n  //   .hexPolygonColor(\n  //     () =>\n  //       `#${Math.round(Math.random() * Math.pow(2, 24))\n  //         .toString(16)\n  //         .padStart(6, \"0\")}`\n  //   )(document.getElementById(\"globeViz\"));\n  world\n    .globeImageUrl(\"//unpkg.com/three-globe/example/img/earth-dark.jpg\")\n    .showGlobe(true)\n    .showAtmosphere(true)\n    .hexPolygonsData(polygonCountries)\n    .hexPolygonResolution(3)\n    .hexPolygonMargin(0.3)\n    .hexPolygonAltitude(0.03)\n    .hexPolygonColor(\n      () =>\n        `#${Math.round(Math.random() * Math.pow(2, 24))\n          .toString(16)\n          .padStart(6, \"0\")}`\n    );\n};"]}